pipeline {
    agent any
    environment {
        GITHUB_REPO = "https://github.com/VeduBox/Vedubox.NotificationService.git"
        GITHUB_BRANCH = "*/master"
        GITHUB_INFRA = "https://github.com/kypnt/infrastructure/tree/main/Vedubox-devops"
        INFRA_BRANCH = "*/main"
        SERVICE_NAME="vedubox-notification-service"
        DOTNET_SERVICE_NAME="Vedubox.NotificationService"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }

    stages {
        stage('Clone code from Github') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: GITHUB_BRANCH]], extensions: [], userRemoteConfigs: [[credentialsId: 'matttoken', url: GITHUB_REPO]]])
            
                // infrastructure repo
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: INFRA_BRANCH]], 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'infrastructure']], 
                    userRemoteConfigs: [[credentialsId: 'matttoken', 
                    url: GITHUB_INFRA]]])
            }
        }
    stage('Getting Github Commit ID') {
            steps {
                script {
                    // Checkout the repository and save the resulting metadata
                    def scmVars = checkout([$class: 'GitSCM', branches: [[name: GITHUB_BRANCH]], extensions: [], userRemoteConfigs: [[credentialsId: 'matttoken', url: GITHUB_REPO]]])
                    env.commitHash = scmVars.GIT_COMMIT.take(7)
                    echo "commitHash"
                    echo "${commitHash}"
                    echo "scmVars.GIT_COMMIT"
                    echo "${scmVars.GIT_COMMIT}"
                }
            }
        }
    stage('Build and Test') {
            steps {
                sh 'dotnet restore'
                sh 'dotnet build'
                sh 'dotnet test'
            }
        }
                
        stage('Publish') {
            steps {
                sh 'dotnet publish -c Release /p:PublishDir=../publish'
            }
        }
    stage('Docker Login') {
            steps {
               sh 'echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin'
            }
        }
    stage('Build Container Image and Push to Dockerhub') {
            steps {
                echo "Build Container Image..."
                sh "docker build --file=${DOTNET_SERVICE_NAME}/Dockerfile --tag=${DOCKERHUB_CREDENTIALS_USR}/${SERVICE_NAME}:${commitHash} --build-arg COMMIT=${commitHash} --rm=true --no-cache ./publish"
                echo "Tagged Image..."
                sh "docker tag ${DOCKERHUB_CREDENTIALS_USR}/${SERVICE_NAME}:${commitHash} ${DOCKERHUB_CREDENTIALS_USR}/${SERVICE_NAME}:latest"
                echo "Push image to Dockerhub..."
                sh "docker push ${DOCKERHUB_CREDENTIALS_USR}/${SERVICE_NAME}:${commitHash}"
                sh "docker push ${DOCKERHUB_CREDENTIALS_USR}/${SERVICE_NAME}:latest"
		        //sh "docker rmi \$(docker images | grep '${SERVICE_NAME}') || true"
                //sh "docker image prune -f"
           }
        }
    stage ('K8S Deploy') {
          steps {
            script {
                withKubeConfig([credentialsId: 'VeduboxConfig', serverUrl: '']) {
                //sh ('kubectl apply -f /var/lib/jenkins/workspace/azure-aks-vdbx/infrastructure/rec-tool/kubernetes/PostgreSql-Deployment/')
                //sh ('kubectl apply -f /var/lib/jenkins/workspace/azure-aks-vdbx/infrastructure/rec-tool/kubernetes/iam-service-deployment/')
                sh ('kubectl apply -f /var/lib/jenkins/workspace/Pipeline-vdbx-withsonarnexus/infrastructure/Vedubox-devops/vdbx-kubernetes/notification-service-deployment')
                }                
            }
        }
    }
 }
}
